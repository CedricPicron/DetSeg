model = dict(
    type='GVD',
    name='gvd',
    requires_masks=True,
    group_init_cfg=dict(
        mode='selected',
        sel_cfg=dict(
            type='AnchorSelector',
            anchor_cfg=dict(
                type='AnchorGenerator',
                map_ids=(2, 3, 4, 5, 6, 7),
                num_sizes=3,
                scale_factor=4.0,
                aspect_ratios=(0.5, 1.0, 2.0),
            ),
            pre_logits_cfg=[
                dict(
                    type='ProjConv',
                    in_channels=256,
                    out_channels=256,
                    kernel_size=1,
                    norm='group',
                    skip=False,
                ),
                dict(
                    type='BottleneckConv',
                    num_layers=1,
                    in_channels=256,
                    bottle_channels=64,
                    out_channels=256,
                    kernel_size=3,
                    norm='group',
                    skip=True,
                ),
            ],
            sel_attrs=dict(
                mode='rel',
                rel_thr=300,
            ),
            post_cfg=dict(
                type='ModuleSelector',
                module_cfg=dict(
                    type='OneStepMLP',
                    num_layers=1,
                    in_size=256,
                    out_size=256,
                    norm='layer',
                    act_fn='relu',
                    skip=False,
                ),
                num_modules=9,
            ),
            matcher_cfg=dict(
                type='BoxMatcher',
                qry_key='anchors',
                share_qry_boxes=True,
                box_metric='iou',
                sim_matcher_cfg=dict(
                    type='SimMatcher',
                    mode='static',
                    static_mode='rel',
                    rel_pos=5,
                    rel_neg=5,
                    get_top_qry_ids=True,
                    top_limit=15,
                ),
            ),
            loss_cfg=dict(
                type='SigmoidFocalLoss',
                alpha=0.25,
                gamma=2.0,
                reduction='sum',
                weight=1.0,
            ),
            init_prob=0.01,
        ),
    ),
    dec_layer_cfg=[
        dict(
            type='BoxCrossAttn',
            attn_cfg=dict(
                type='DeformableAttn',
                in_size=256,
                sample_size=256,
                out_size=256,
                norm='layer',
                act_fn='',
                skip=True,
                version=1,
                num_heads=8,
                num_levels=6,
                num_points=1,
                val_size=256,
            ),
        ),
        dict(
            type='SelfAttn1d',
            in_size=256,
            out_size=256,
            norm='layer',
            act_fn='',
            skip=True,
            num_heads=8,
        ),
        dict(
            type='TwoStepMLP',
            in_size=256,
            hidden_size=2048,
            out_size=256,
            norm1='layer',
            norm2='',
            act_fn1='',
            act_fn2='relu',
            skip=True,
        ),
    ],
    num_dec_layers=6,
    head_cfgs=[
        dict(
            type='BaseClsHead',
            apply_ids=[6],
            logits_cfg=[
                dict(
                    type='nn.Linear',
                    in_features=256,
                    out_features=134,
                    bias=True,
                ),
            ],
            matcher_cfg=dict(
                type='TopMatcher',
                ids_key='sel_top_ids',
                qry_key='box_logits',
                top_pos=15,
                top_neg=15,
                allow_multi_tgt=False,
            ),
            soft_label_type='box_iou',
            loss_cfg=dict(
                type='mmdet.QualityFocalLoss',
                use_sigmoid=True,
                beta=2.0,
                reduction='sum',
                loss_weight=0.5,
                activated=False,
            ),
        ),
        dict(
            type='BaseBox2dHead',
            apply_ids=[6],
            logits_cfg=[
                dict(
                    type='nn.Linear',
                    in_features=256,
                    out_features=256,
                    bias=True,
                ),
                dict(
                    type='nn.LayerNorm',
                    normalized_shape=256,
                ),
                dict(
                    type='nn.Linear',
                    in_features=256,
                    out_features=256,
                    bias=True,
                ),
                dict(
                    type='nn.ReLU',
                    inplace=True,
                ),
                dict(
                    type='nn.Linear',
                    in_features=256,
                    out_features=256,
                    bias=True,
                ),
                dict(
                    type='nn.ReLU',
                    inplace=True,
                ),
                dict(
                    type='nn.Linear',
                    in_features=256,
                    out_features=4,
                    bias=True,
                ),
            ],
            box_coder_cfg=dict(
              type='RcnnBoxCoder',
            ),
            get_dets=False,
            dup_attrs=dict(
                type='nms',
                nms_candidates=1000,
                nms_thr=0.65,
            ),
            max_dets=100,
            report_match_stats=True,
            matcher_cfg=None,
            loss_cfg=dict(
                type='BoxLoss',
                box_loss_type='mmdet_boxes',
                box_loss_cfg=dict(
                    type='mmdet.EIoULoss',
                    reduction='sum',
                    loss_weight=1.85,
                ),
            ),
        ),
        dict(
            type='PointRendRoIHead',
            mask_roi_extractor=dict(
                type='mmdet.GenericRoIExtractor',
                aggregation='concat',
                roi_layer=dict(type='SimpleRoIAlign', output_size=14),
                out_channels=256,
                featmap_strides=[4],
            ),
            qry_cfg=[
                dict(
                    type='nn.Linear',
                    in_features=256,
                    out_features=256,
                    bias=True,
                ),
                dict(
                    type='nn.ReLU',
                    inplace=True,
                ),
            ],
            fuse_qry_cfg=[
                dict(
                    type='nn.Conv2d',
                    in_channels=512,
                    out_channels=256,
                    kernel_size=1,
                    bias=True,
                ),
                dict(
                    type='nn.ReLU',
                    inplace=True,
                ),
                dict(
                    type='nn.Conv2d',
                    in_channels=256,
                    out_channels=256,
                    kernel_size=1,
                    bias=True,
                ),
            ],
            mask_head=dict(
                type='mmdet.FCNMaskHead',
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=133,
                loss_mask=dict(
                    type='mmdet.CrossEntropyLoss',
                    use_sigmoid=True,
                    reduction='sum',
                    loss_weight=1.0,
                ),
            ),
            point_head_cfg=dict(
                type='mmdet.MaskPointHead',
                num_fcs=3,
                in_channels=256,
                fc_channels=256,
                num_classes=133,
                coarse_pred_each_layer=True,
                loss_point=dict(
                    type='mmdet.CrossEntropyLoss',
                    use_sigmoid=True,
                    reduction='sum',
                    loss_weight=1.0,
                ),
            ),
            train_attrs=dict(
                num_points=196,
                oversample_ratio=3.0,
                importance_sample_ratio=0.75,
            ),
            test_attrs=dict(
                subdivision_steps=3,
                subdivision_num_points=784,
                scale_factor=2.0,
            ),
            seg_type='panoptic',
            dup_attrs=dict(
                type='nms',
                nms_candidates=1000,
                nms_thr=0.5,
            ),
            pan_post_attrs=dict(
                score_thr=0.3,
                nms_thr=0.75,
                pan_mask_thr=0.35,
                ins_pan_thr=0.6,
                area_thr=150,
            ),
        ),
    ],
    head_apply_ids=[6],
)
